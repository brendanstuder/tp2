image: python:3.10

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  STAGE_ID: ${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

cache:
  paths:
    - .cache/pip
    - venv/

#before_script:
#   - python --version
#   - pip install virtualenv
#   - virtualenv venv
#   - source venv/bin/activate
#   - pip install --upgrade pip
#   - pip install --upgrade setuptools
#   - pip install -r requirements.txt

test:
  script:
    python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install --upgrade setuptools
    - pip install -r requirements.txt
    - pytest

sonarcloud-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - TP2

# Using kaniko, which is an laternative for Docker, because the our Gitlab runners are not configured to build and push images with Docker.
# build:
#   stage: build
#   image:
#     name: gcr.io/kaniko-project/executor:v1.9.0-debug
#     entrypoint: [""]
#   before_script: []
#   script:
#     - /kaniko/executor
#       --context "${CI_PROJECT_DIR}"
#       --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
#       --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"

run:
  script:
    - python setup.py bdist_wheel
    # an alternative approach is to install and run:
    - pip install dist/*
    # run the command here
  artifacts:
    paths:
      - dist/*.whl

